<?php

/*
 * This file is part of Sulu.
 *
 * (c) MASSIVE ART WebServices GmbH
 *
 * This source file is subject to the MIT license that is bundled
 * with this source code in the file LICENSE.
 */

namespace Sulu\Component\Tests\Functional\Content\Document\Query;

use Sulu\Bundle\TestBundle\Testing\SuluTestCase;
use Sulu\Component\Content\Document\Query\QueryBuilder;
use Sulu\Component\Content\Document\WorkflowStage;

/**
 * This is a functional test for the query builder.
 *
 * Because of the large amount of dependencies and classes involved in this query builder
 * it is easier to make this a functional test.
 *
 * We compare the query generated by the PHPCR layer against an expected query.
 *
 * WARNING: The query generated will not always match to the query we construct as the field names will
 *          be translated to property names.
 */
class QueryBuilderFunctionalTest extends SuluTestCase
{
    /**
     * @var DocumentManager
     */
    private $manager;

    public function setUp()
    {
        $this->manager = $this->getContainer()->get('sulu_document_manager.document_manager');
    }

    /**
     * It should be able to use a structures fields as criteria.
     */
    public function testStructureFieldsCriteria()
    {
        $builder = $this->manager->createQueryBuilder();
        $builder
            ->setLocale('de')
            ->useStructure('p', 'overview')
            ->from()->document('page', 'p')->end()
            ->where()->eq()->structureField('p.article')->literal('hello');

        $query = $builder->getQuery();
        $this->assertEquals(
            'SELECT * FROM [nt:unstructured] AS p WHERE (p.[i18n:de-article] = \'hello\' AND p.[jcr:mixinTypes] = \'sulu:page\')',
            $query->getPhpcrQuery()->getStatement()
        );
    }

    /**
     * It should support OrWhere.
     */
    public function testOrWhere()
    {
        $builder = $this->manager->createQueryBuilder();
        $builder
            ->setLocale('de')
            ->useStructure('p', 'overview')
            ->from()->document('page', 'p')->end()
            ->where()
                ->eq()->field('p.redirectType')->literal('hello')->end()
            ->end();

        $builder->orWhere()->eq()->field('p.redirectType')->literal('goodbye');

        $this->assertQuery(
            'SELECT * FROM [nt:unstructured] AS p WHERE ((p.[i18n:de-nodeType] = \'hello\' OR p.[i18n:de-nodeType] = \'goodbye\') AND p.[jcr:mixinTypes] = \'sulu:page\')',
            $builder
        );
    }

    /**
     * It should support AndWhere.
     */
    public function testAndWhere()
    {
        $builder = $this->manager->createQueryBuilder();
        $builder
            ->setLocale('de')
            ->useStructure('p', 'overview')
            ->from()->document('page', 'p')->end()
            ->where()
                ->eq()->field('p.redirectType')->literal('hello')->end()
            ->end()
            ->andWhere()->eq()->field('p.redirectType')->literal('goodbye');

        $this->assertQuery(
            'SELECT * FROM [nt:unstructured] AS p WHERE ((p.[i18n:de-nodeType] = \'hello\' AND p.[i18n:de-nodeType] = \'goodbye\') AND p.[jcr:mixinTypes] = \'sulu:page\')',
            $builder
        );
    }

    /**
     * It support AndX.
     */
    public function testAnd()
    {
        $builder = $this->manager->createQueryBuilder();
        $builder
            ->setLocale('de')
            ->from()->document('page', 'p')->end()
            ->where()->andX()
                ->eq()->field('p.redirectType')->literal('hello')->end()
                ->eq()->field('p.creator')->literal('bar');

        $this->assertQuery(
            'SELECT * FROM [nt:unstructured] AS p WHERE ((p.[i18n:de-nodeType] = \'hello\' AND p.[i18n:de-creator] = \'bar\') AND p.[jcr:mixinTypes] = \'sulu:page\')',
            $builder
        );
    }

    /**
     * It should support Or.
     */
    public function testOr()
    {
        $builder = $this->manager->createQueryBuilder();
        $builder->setLocale('de')
            ->from()->document('page', 'p')->end()
            ->where()->orX()
                ->eq()->field('p.redirectType')->literal('hello')->end()
                ->eq()->field('p.creator')->literal('bar');

        $this->assertQuery(
            'SELECT * FROM [nt:unstructured] AS p WHERE ((p.[i18n:de-nodeType] = \'hello\' OR p.[i18n:de-creator] = \'bar\') AND p.[jcr:mixinTypes] = \'sulu:page\')',
            $builder
        );
    }

    /**
     * It should support Not.
     */
    public function testNot()
    {
        $builder = $this->manager->createQueryBuilder();
        $builder->setLocale('de')
            ->from()->document('page', 'p')->end()
            ->where()->not()->eq()->field('p.redirectType')->literal('hello');

        $this->assertQuery(
            'SELECT * FROM [nt:unstructured] AS p WHERE ((NOT p.[i18n:de-nodeType] = \'hello\') AND p.[jcr:mixinTypes] = \'sulu:page\')',
            $builder
        );
    }

    /**
     * It should maintain the Sulu Wrapper.
     */
    public function testMaintainWrapper()
    {
        $builder = $this->manager->createQueryBuilder();
        $where = $builder->setLocale('de')
            ->useStructure('p', 'overview')
            ->from()->document('page', 'p')->end()
            ->where()
                ->andX()
                    ->orX()
                        ->eq()->field('p.redirectType')->literal('hello')->end()
                        ->eq()->structureField('p.article')->literal('bar')->end()
                    ->end()
                    ->eq()->structureField('p.article')->literal('barbar')
                ->end()
            ->end();

        $this->assertInstanceOf('Sulu\Component\Content\Document\Query\Builder\Where', $where);
    }

    /**
     * It should support ordering.
     */
    public function testOrdering()
    {
        $builder = $this->manager->createQueryBuilder();
        $builder->setLocale('de')
            ->useStructure('p', 'overview')
            ->from()->document('page', 'p')->end()
            ->orderBy()
                ->asc()->field('p.redirectType')->end()
                ->desc()->structureField('p.article');

        $this->assertQuery(
            'SELECT * FROM [nt:unstructured] AS p WHERE p.[jcr:mixinTypes] = \'sulu:page\' ORDER BY p.[i18n:de-nodeType] ASC, p.[i18n:de-article] DESC',
            $builder
        );
    }

    /**
     * It should support ordering.
     */
    public function testOrderAdd()
    {
        $builder = $this->manager->createQueryBuilder();
        $builder->setLocale('de')
            ->useStructure('p', 'overview')
            ->from()->document('page', 'p')->end()
            ->orderBy()
                ->asc()->field('p.redirectType')->end()
            ->end()
            ->addOrderBy()
                ->desc()->structureField('p.article');

        $this->assertQuery(
            'SELECT * FROM [nt:unstructured] AS p WHERE p.[jcr:mixinTypes] = \'sulu:page\' ORDER BY p.[i18n:de-nodeType] ASC, p.[i18n:de-article] DESC',
            $builder
        );
    }

    /**
     * It should throw an exception if an unknown structure field is used.
     *
     * @expectedException InvalidArgumentException 
     * @expectedExceptionMessage Unknown model property "foobar", in structure "overview". Known model properties: "title"
     */
    public function testUnknownStructureField()
    {
        $builder = $this->manager->createQueryBuilder();
        $builder
            ->setLocale('de')
            ->useStructure('p', 'overview')
            ->from()->document('page', 'p')->end()
            ->where()->eq()->field('p.structure#foobar')->literal('hello');

        $builder->getQuery();
    }

    /**
     * The standard query builder should work as normal.
     */
    public function testNormalQueryBuilder()
    {
        $builder = $this->manager->createQueryBuilder();
        $builder
            ->setLocale('de')
            ->useStructure('p', 'overview')
            ->from()->document('page', 'p')->end()
            ->where()->eq()->field('p.workflowStage')->literal(WorkflowStage::PUBLISHED);

        $query = $builder->getQuery();
        $this->assertEquals(
            'SELECT * FROM [nt:unstructured] AS p WHERE (p.[i18n:de-state] = CAST(\'2\' AS LONG) AND p.[jcr:mixinTypes] = \'sulu:page\')',
            $query->getPhpcrQuery()->getStatement()
        );
    }

    protected function assertQuery($queryString, QueryBuilder $builder)
    {
        $query = $builder->getQuery();
        $this->assertEquals($queryString, $query->getPhpcrQuery()->getStatement());
    }
}
